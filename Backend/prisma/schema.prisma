generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String       @id @default(uuid()) @db.Uuid
  businessName        String?      @db.VarChar(255)
  name                String       @db.VarChar(100)
  phoneNumber         String?      @unique @db.VarChar(20)
  email               String       @unique @db.VarChar(255)
  passwordHash        String?      @map("password")
  emailVerified       DateTime?    @map("email_verified")
  createdAt           DateTime     @default(now()) @db.Timestamp(6)
  updatedAt           DateTime     @default(now()) @updatedAt @db.Timestamp(6)
  deletedAt           DateTime?
  address             String?      @db.VarChar(500)
  isProfileCompleted  Boolean      @default(false)
  accounts      Account[]
  generations   Generation[]
  sessions      Session[]

  @@index([email])
  @@index([phoneNumber])
  tattoos      Tattoo[]
  editGenerations EditGeneration[]

}

model Account {
  id                String  @id @default(cuid())
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  metadata          Json?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  userAgent    String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @db.Timestamp(6)

  @@unique([identifier, token])
}

model Generation {
  id             String           @id @default(uuid()) @db.Uuid
  userId         String?          @db.Uuid
  userImageUrl   String
  status         GenerationStatus @default(PENDING)
  createdAt      DateTime         @default(now()) @db.Timestamp(6)
  updatedAt      DateTime         @default(now()) @updatedAt @db.Timestamp(6)
  user           User?            @relation(fields: [userId], references: [id])
  assets         GenerationAsset[]
}

model GenerationAsset {
  id              String   @id @default(uuid()) @db.Uuid
  generationId    String   @db.Uuid
  itemImageUrl    String?
  maskImageUrl    String?
  outputImageUrl  String?
  createdAt       DateTime @default(now())
  generation      Generation @relation(fields: [generationId], references: [id], onDelete: Cascade)
}

model Tattoo {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  imageUrl  String   @db.VarChar(500)
  deleted   Boolean  @default(false)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(6)

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, deleted])
}


enum GenerationStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model EditGeneration {
  id          String       @id @default(uuid()) @db.Uuid
  userId      String?      @db.Uuid
  prompt      String
  status      EditStatus   @default(PENDING)
  createdAt   DateTime     @default(now()) @db.Timestamp(6)
  updatedAt   DateTime     @default(now()) @updatedAt @db.Timestamp(6)

  user        User?        @relation(fields: [userId], references: [id])
  assets      EditAsset[]
}

model EditAsset {
  id               String         @id @default(uuid()) @db.Uuid
  editGenerationId String         @db.Uuid

  inputImageUrl    String?
  outputImageUrl   String?

  createdAt        DateTime       @default(now())
  editGeneration   EditGeneration @relation(fields: [editGenerationId], references: [id], onDelete: Cascade)
}

enum EditStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}