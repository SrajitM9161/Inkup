generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid()) @db.Uuid
  businessName   String?   @db.VarChar(255)
  name           String    @db.VarChar(100)
  phoneNumber    String?   @unique @db.VarChar(20)
  email          String    @unique @db.VarChar(255)
  passwordHash   String?   @map("password") 
  address        String?   @db.VarChar(500) 
  emailVerified  DateTime? @map("email_verified")

  accounts       Account[]
  sessions       Session[]

  createdAt      DateTime  @default(now()) @db.Timestamp(6)
  updatedAt      DateTime  @updatedAt @default(now()) @db.Timestamp(6)

  deletedAt      DateTime?

  @@index([email])
  @@index([phoneNumber])
  generations    Generation[]
}

model Account {
  id                 String   @id @default(cuid())
  userId             String   @db.Uuid
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  metadata           Json?   

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id            String   @id @default(cuid())
  sessionToken  String   @unique
  userId        String   @db.Uuid
  expires       DateTime
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  userAgent     String?  // Optional: device info for security

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @db.Timestamp(6)

  @@unique([identifier, token])
}

model Generation {
  id             String           @id @default(uuid()) @db.Uuid
  user           User             @relation(fields: [userId], references: [id])
  userId         String           @db.Uuid

  userImageUrl   String           @db.VarChar(500)
  itemImageUrl   String           @db.VarChar(500)
  outputImageUrl String?          @db.VarChar(500) // nullable until generation is done

  status         GenerationStatus @default(PENDING)
  createdAt      DateTime         @default(now()) @db.Timestamp(6)
  updatedAt      DateTime         @updatedAt @default(now()) @db.Timestamp(6)
}

enum GenerationStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

